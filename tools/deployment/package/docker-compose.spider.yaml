name: "clp-package"

include: ["docker-compose.spider.base.yaml"]

# The `x-*` definitions below are duplicated from docker-compose.base.yaml. Refer to that file for
# documentation.
x-service-defaults: &service_defaults
  image: "${CLP_PACKAGE_CONTAINER_IMAGE_REF:-clp-package}"
  logging:
    driver: "local"
  stop_grace_period: "60s"
  user: "${CLP_FIRST_PARTY_SERVICE_UID_GID:-1000:1000}"
x-healthcheck-defaults: &healthcheck_defaults
  interval: "30s"
  retries: 3
  start_interval: "2s"
  start_period: "60s"
  timeout: "2s"
x-volume-definitions:
  clp-config-readonly: &volume_clp_config_readonly
    type: "bind"
    source: "${CLP_LOGS_DIR_HOST:-./var/log}/.clp-config.yml"
    target: "/etc/clp-config.yml"
    read_only: true
  clp-logs: &volume_clp_logs
    type: "bind"
    source: "${CLP_LOGS_DIR_HOST:-./var/log}"
    target: "/var/log"


services:
  queue:
    <<: *service_defaults
    image: "rabbitmq:3.9.8"
    hostname: "queue"
    user: "${CLP_THIRD_PARTY_SERVICE_UID_GID:-1000:1000}"
    environment:
      RABBITMQ_DEFAULT_PASS: "${CLP_QUEUE_PASS:?Please set a value.}"
      RABBITMQ_DEFAULT_USER: "${CLP_QUEUE_USER:?Please set a value.}"
      RABBITMQ_LOGS: "/var/log/rabbitmq/rabbitmq.log"
    ports:
      - host_ip: "${CLP_QUEUE_HOST:-127.0.0.1}"
        published: "${CLP_QUEUE_PORT:-5672}"
        target: 5672
    volumes:
      - type: "bind"
        source: "${CLP_QUEUE_LOGS_DIR_HOST:-./var/log/queue}"
        target: "/var/log/rabbitmq"
    healthcheck:
      <<: *healthcheck_defaults
      test: [
        "CMD",
        "rabbitmq-diagnostics", "check_running"
      ]

  redis:
    <<: *service_defaults
    image: "redis:7.2.4"
    hostname: "redis"
    user: "${CLP_THIRD_PARTY_SERVICE_UID_GID:-1000:1000}"
    ports:
      - host_ip: "${CLP_REDIS_HOST:-127.0.0.1}"
        published: "${CLP_REDIS_PORT:-6379}"
        target: 6379
    volumes:
      - type: "bind"
        source: "${CLP_REDIS_CONF_FILE_HOST:-./etc/redis/redis.conf}"
        target: "/usr/local/etc/redis/redis.conf"
        read_only: true
      - type: "bind"
        source: "${CLP_REDIS_DATA_DIR_HOST:-./var/data/redis}"
        target: "/data"
      - type: "bind"
        source: "${CLP_REDIS_LOGS_DIR_HOST:-./var/log/redis}"
        target: "/var/log/redis"
    command: [
      "redis-server",
      "/usr/local/etc/redis/redis.conf",
      "--requirepass", "${CLP_REDIS_PASS:?Please set a value.}"
    ]
    healthcheck:
      <<: *healthcheck_defaults
      test: [
        "CMD",
        "redis-cli",
        "-h", "127.0.0.1",
        "-p", "6379",
        "-a", "${CLP_REDIS_PASS:?Please set a value.}",
        "PING"
      ]

  results-cache:
    <<: *service_defaults
    image: "mongo:7.0.1"
    hostname: "results_cache"
    user: "${CLP_THIRD_PARTY_SERVICE_UID_GID:-1000:1000}"
    ports:
      - host_ip: "${CLP_RESULTS_CACHE_HOST:-127.0.0.1}"
        published: "${CLP_RESULTS_CACHE_PORT:-27017}"
        target: 27017
    volumes:
      - type: "bind"
        source: "${CLP_RESULTS_CACHE_CONF_FILE_HOST:-./etc/mongo/mongod.conf}"
        target: "/etc/mongo/mongod.conf"
        read_only: true
      - type: "bind"
        source: "${CLP_RESULTS_CACHE_DATA_DIR_HOST:-./var/data/results_cache}"
        target: "/data/db"
      - type: "bind"
        source: "${CLP_RESULTS_CACHE_LOGS_DIR_HOST:-./var/log/results_cache}"
        target: "/var/log/mongodb"
    command: [
      "--config", "/etc/mongo/mongod.conf",
      "--bind_ip", "0.0.0.0",
    ]
    healthcheck:
      <<: *healthcheck_defaults
      test: [
        "CMD-SHELL",
        "echo 'db.runCommand(\"ping\").ok' | mongosh 127.0.0.1:27017/test --quiet"
      ]

  results-cache-indices-creator:
    <<: *service_defaults
    hostname: "results_cache_indices_creator"
    environment:
      PYTHONPATH: "/opt/clp/lib/python3/site-packages"
    depends_on:
      results-cache:
        condition: "service_healthy"
    command: [
      "python3",
      "-u",
      "-m", "clp_py_utils.initialize-results-cache",
      "--uri", "mongodb://results_cache:27017/${CLP_RESULTS_CACHE_DB_NAME:-clp-query-results}",
      "--stream-collection", "${CLP_RESULTS_CACHE_STREAM_COLLECTION_NAME:-stream-files}",
    ]

  query-scheduler:
    <<: *service_defaults
    hostname: "query_scheduler"
    stop_grace_period: "10s"
    environment:
      BROKER_URL: "amqp://${CLP_QUEUE_USER:?Please set a value.}\
        :${CLP_QUEUE_PASS:?Please set a value.}@queue:5672"
      CLP_DB_PASS: "${CLP_DB_PASS:?Please set a value.}"
      CLP_DB_USER: "${CLP_DB_USER:?Please set a value.}"
      CLP_LOGGING_LEVEL: "${CLP_QUERY_SCHEDULER_LOGGING_LEVEL:-INFO}"
      CLP_LOGS_DIR: "/var/log"
      PYTHONPATH: "/opt/clp/lib/python3/site-packages"
      RESULT_BACKEND: "redis://default:${CLP_REDIS_PASS:?Please set a value.}@redis:6379\
        /${CLP_REDIS_BACKEND_DB_QUERY:-0}"
    volumes:
      - *volume_clp_config_readonly
      - *volume_clp_logs
    depends_on:
      db-table-creator:
        condition: "service_completed_successfully"
      queue:
        condition: "service_healthy"
      redis:
        condition: "service_healthy"
    command: [
      "python3",
      "-u",
      "-m", "job_orchestration.scheduler.query.query_scheduler",
      "--config", "/etc/clp-config.yml"
    ]
    healthcheck:
      <<: *healthcheck_defaults
      test: [
        "CMD",
        "bash",
        "-c",
        "< /dev/tcp/query_scheduler/7000"
      ]

  query-worker:
    <<: *service_defaults
    hostname: "query_worker"
    environment:
      BROKER_URL: "amqp://${CLP_QUEUE_USER:?Please set a value.}\
        :${CLP_QUEUE_PASS:?Please set a value.}@queue:5672"
      CLP_CONFIG_PATH: "/etc/clp-config.yml"
      CLP_HOME: "/opt/clp"
      CLP_LOGGING_LEVEL: "${CLP_QUERY_WORKER_LOGGING_LEVEL:-INFO}"
      CLP_LOGS_DIR: "/var/log/query_worker"
      CLP_WORKER_LOG_PATH: "/var/log/query_worker/worker.log"
      PYTHONPATH: "/opt/clp/lib/python3/site-packages"
      RESULT_BACKEND: "redis://default:${CLP_REDIS_PASS:?Please set a value.}@redis:6379\
        /${CLP_REDIS_BACKEND_DB_QUERY:-0}"
    volumes:
      - *volume_clp_config_readonly
      - *volume_clp_logs
      - "${CLP_ARCHIVE_OUTPUT_DIR_HOST:-empty}:/var/data/archives"
      - "${CLP_AWS_CONFIG_DIR_HOST:-empty}:/.aws:ro"
      - "${CLP_STAGED_STREAM_OUTPUT_DIR_HOST:-empty}:/var/data/staged-streams"
      - "${CLP_STREAM_OUTPUT_DIR_HOST:-empty}:/var/data/streams"
    command: [
      "python3",
      "-u",
      "/opt/clp/lib/python3/site-packages/bin/celery",
      "-A", "job_orchestration.executor.query",
      "worker",
      "--concurrency", "${CLP_QUERY_WORKER_CONCURRENCY:-1}",
      "--loglevel", "WARNING",
      "-f", "/var/log/query_worker/worker.log",
      "-Q", "query",
      "-n", "query-worker"
    ]

  reducer:
    <<: *service_defaults
    hostname: "reducer"
    environment:
      CLP_HOME: "/opt/clp"
      CLP_LOGGING_LEVEL: "${CLP_REDUCER_LOGGING_LEVEL:-INFO}"
      CLP_LOGS_DIR: "/var/log/reducer"
      PYTHONPATH: "/opt/clp/lib/python3/site-packages"
    volumes:
      - *volume_clp_config_readonly
      - *volume_clp_logs
    depends_on:
      query-scheduler:
        condition: "service_healthy"
      results-cache-indices-creator:
        condition: "service_completed_successfully"
    command: [
      "python3", "-u",
      "-m", "job_orchestration.reducer.reducer",
      "--config", "/etc/clp-config.yml",
      "--concurrency", "${CLP_REDUCER_CONCURRENCY:-1}",
      "--upsert-interval", "${CLP_REDUCER_UPSERT_INTERVAL:-100}"
    ]
